{"version":3,"sources":["logo.svg","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","className","type","class","checked","c","name","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,kIC2C5BC,MAzCf,WACI,OACI,yBAAKC,UAAU,QACX,8BACI,sCAAW,2BAAOC,KAAK,UACvB,+CAAoB,2BAAOA,KAAK,UAChC,wCAAa,2BAAOA,KAAK,UACzB,yCACA,2BAAOC,MAAM,aAAb,sBACA,2BAAOD,KAAK,WAAWE,QAAQ,aACvB,6BACR,2BAAOD,MAAM,aAAb,OACA,2BAAOD,KAAK,cACJ,6BACR,2BAAOC,MAAM,aAAb,WACA,2BAAOD,KAAK,cACJ,6BACR,2BAAOC,MAAM,aAAb,WACA,2BAAOD,KAAK,cACJ,6BACR,2BAAOC,MAAM,aAAb,YACA,2BAAOD,KAAK,WAAWG,GAAC,KAChB,6BACR,2BAAOF,MAAM,aAAb,OACA,2BAAOD,KAAK,cACJ,6BACR,wCACA,qDAA0B,2BAAOA,KAAK,QAAQI,KAAK,YAAYC,MAAM,yBAA+B,6BACpG,wDAA6B,2BAAOL,KAAK,QAAQI,KAAK,YAAYC,MAAM,4BAAmC,6BAC3G,qDAA0B,2BAAOL,KAAK,QAAQI,KAAM,YAAYC,MAAM,yBAA+B,6BACrG,6CAAkB,2BAAOL,KAAK,QAAQI,KAAK,YAAYC,MAAM,iBAAuB,6BACpF,4CAAiB,2BAAOL,KAAK,UAC7B,wCACA,qCAAU,2BAAOA,KAAK,QAAQI,KAAK,eACnC,oCAAS,2BAAOJ,KAAK,QAAQI,KAAK,eAAqB,6BACvD,4CCxBDE,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCIcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d4c352e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Form.css'\r\nfunction Form(){\r\n    return (\r\n        <div className=\"form\">\r\n            <form>\r\n                <label>file<input type=\"file\" /></label>\r\n                <label>Learning Rate<input type=\"text\"/></label>\r\n                <label>lambda<input type=\"text\"/></label>\r\n                <p>optimizers</p>\r\n                <label class=\"container\">Batch Normalization\r\n                <input type=\"checkbox\" checked=\"checked\" />\r\n                </label><br />\r\n                <label class=\"container\">ADAM\r\n                <input type=\"checkbox\"  />\r\n                </label><br />\r\n                <label class=\"container\">Momentum\r\n                <input type=\"checkbox\"  />\r\n                </label><br />\r\n                <label class=\"container\">RMS PROP\r\n                <input type=\"checkbox\"  />\r\n                </label><br />\r\n                <label class=\"container\">Sochastic\r\n                <input type=\"checkbox\" c />\r\n                </label><br />\r\n                <label class=\"container\">none\r\n                <input type=\"checkbox\"  />\r\n                </label><br />\r\n                <p>Algorithm</p>\r\n                <label>Logistic Regression<input type=\"radio\" name=\"Algorithm\" value=\"Logistic Regression\"/></label><br />\r\n                <label>Support Vector Machine<input type=\"radio\" name=\"Algorithm\" value=\"Support Vector Machine\" /></label><br />\r\n                <label>K nearest neighbour<input type=\"radio\" name= \"Algorithm\" value=\"K nearest neighbour\"/></label><br />\r\n                <label>Naive Bayes<input type=\"radio\" name=\"Algorithm\" value=\"Naive Bayes\"/></label><br />\r\n                <lable>iterations<input type=\"text\"/></lable>\r\n                <p>visualize</p>\r\n                <lable>YES<input type=\"radio\" name=\"visualize\"/></lable>\r\n                <lable>NO<input type=\"radio\" name=\"visualize\"/></lable><br />\r\n                <button>build</button>\r\n            </form>\r\n        </div>\r\n       \r\n    )\r\n}\r\nexport default Form","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './components/Form.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}